// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/openticket.proto

package openticketpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenTicketServiceClient is the client API for OpenTicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenTicketServiceClient interface {
	GetOpenTicket(ctx context.Context, in *GetOpenTicketRequest, opts ...grpc.CallOption) (*OpenTicket, error)
	SetOpenTicket(ctx context.Context, in *OpenTicket, opts ...grpc.CallOption) (*SetOpenTicketResponse, error)
}

type openTicketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenTicketServiceClient(cc grpc.ClientConnInterface) OpenTicketServiceClient {
	return &openTicketServiceClient{cc}
}

func (c *openTicketServiceClient) GetOpenTicket(ctx context.Context, in *GetOpenTicketRequest, opts ...grpc.CallOption) (*OpenTicket, error) {
	out := new(OpenTicket)
	err := c.cc.Invoke(ctx, "/openticket.OpenTicketService/GetOpenTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openTicketServiceClient) SetOpenTicket(ctx context.Context, in *OpenTicket, opts ...grpc.CallOption) (*SetOpenTicketResponse, error) {
	out := new(SetOpenTicketResponse)
	err := c.cc.Invoke(ctx, "/openticket.OpenTicketService/SetOpenTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenTicketServiceServer is the server API for OpenTicketService service.
// All implementations must embed UnimplementedOpenTicketServiceServer
// for forward compatibility
type OpenTicketServiceServer interface {
	GetOpenTicket(context.Context, *GetOpenTicketRequest) (*OpenTicket, error)
	SetOpenTicket(context.Context, *OpenTicket) (*SetOpenTicketResponse, error)
	mustEmbedUnimplementedOpenTicketServiceServer()
}

// UnimplementedOpenTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpenTicketServiceServer struct {
}

func (UnimplementedOpenTicketServiceServer) GetOpenTicket(context.Context, *GetOpenTicketRequest) (*OpenTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenTicket not implemented")
}
func (UnimplementedOpenTicketServiceServer) SetOpenTicket(context.Context, *OpenTicket) (*SetOpenTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOpenTicket not implemented")
}
func (UnimplementedOpenTicketServiceServer) mustEmbedUnimplementedOpenTicketServiceServer() {}

// UnsafeOpenTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenTicketServiceServer will
// result in compilation errors.
type UnsafeOpenTicketServiceServer interface {
	mustEmbedUnimplementedOpenTicketServiceServer()
}

func RegisterOpenTicketServiceServer(s grpc.ServiceRegistrar, srv OpenTicketServiceServer) {
	s.RegisterService(&OpenTicketService_ServiceDesc, srv)
}

func _OpenTicketService_GetOpenTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenTicketServiceServer).GetOpenTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openticket.OpenTicketService/GetOpenTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenTicketServiceServer).GetOpenTicket(ctx, req.(*GetOpenTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenTicketService_SetOpenTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenTicketServiceServer).SetOpenTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openticket.OpenTicketService/SetOpenTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenTicketServiceServer).SetOpenTicket(ctx, req.(*OpenTicket))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenTicketService_ServiceDesc is the grpc.ServiceDesc for OpenTicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenTicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openticket.OpenTicketService",
	HandlerType: (*OpenTicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenTicket",
			Handler:    _OpenTicketService_GetOpenTicket_Handler,
		},
		{
			MethodName: "SetOpenTicket",
			Handler:    _OpenTicketService_SetOpenTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/openticket.proto",
}
